"use strict";
// Unit tests at ./parseUrl.spec.ts
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUrlFromComponents = exports.assertUrlComponents = exports.isBaseServer = exports.assertUsageUrl = exports.isParsable = exports.parseUrl = void 0;
const slice_js_1 = require("./slice.js");
const assert_js_1 = require("./assert.js");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
function isParsable(url) {
    // `parseUrl()` works with these URLs
    return (url.startsWith('/') ||
        url.startsWith('http') ||
        url.startsWith('tauri://') ||
        url.startsWith('.') ||
        url.startsWith('?') ||
        url.startsWith('#') ||
        url === '');
}
exports.isParsable = isParsable;
function assertUsageUrl(url, errPrefix) {
    (0, assert_js_1.assert)(errPrefix.includes(' but '));
    (0, assert_js_1.assertUsage)(typeof url === 'string', `${errPrefix} should be a string`);
    if (isParsable(url))
        return;
    if (!url.startsWith('/') && !url.includes(':')) {
        (0, assert_js_1.assertUsage)(false, `${errPrefix} is ${picocolors_1.default.cyan(url)} and it should be /${picocolors_1.default.cyan(url)} instead (URL pathnames should start with a leading slash)`);
    }
    else {
        (0, assert_js_1.assertUsage)(false, `${errPrefix} isn't a valid URL`);
    }
}
exports.assertUsageUrl = assertUsageUrl;
function parseUrl(url, baseServer) {
    (0, assert_js_1.assert)(isParsable(url));
    (0, assert_js_1.assert)(baseServer.startsWith('/'));
    // Hash
    const [urlWithoutHash, ...hashList] = url.split('#');
    (0, assert_js_1.assert)(urlWithoutHash !== undefined);
    const hashOriginal = ['', ...hashList].join('#') || null;
    (0, assert_js_1.assert)(hashOriginal === null || hashOriginal.startsWith('#'));
    const hash = hashOriginal === null ? '' : decodeSafe(hashOriginal.slice(1));
    // Search
    const [urlWithoutHashNorSearch, ...searchList] = urlWithoutHash.split('?');
    (0, assert_js_1.assert)(urlWithoutHashNorSearch !== undefined);
    const searchOriginal = ['', ...searchList].join('?') || null;
    (0, assert_js_1.assert)(searchOriginal === null || searchOriginal.startsWith('?'));
    const search = {};
    const searchAll = {};
    Array.from(new URLSearchParams(searchOriginal || '')).forEach(([key, val]) => {
        search[key] = val;
        searchAll[key] = [...(searchAll[key] || []), val];
    });
    // Origin + pathname
    const { origin, pathnameResolved } = parseWithNewUrl(urlWithoutHashNorSearch, baseServer);
    (0, assert_js_1.assert)(origin === null || origin === decodeSafe(origin)); // AFAICT decoding the origin is useless
    (0, assert_js_1.assert)(pathnameResolved.startsWith('/'));
    (0, assert_js_1.assert)(origin === null || url.startsWith(origin));
    // `pathnameOriginal`
    const pathnameOriginal = urlWithoutHashNorSearch.slice((origin || '').length);
    assertUrlComponents(url, origin, pathnameOriginal, searchOriginal, hashOriginal);
    // Base URL
    let { pathname, hasBaseServer } = analyzeBaseServer(pathnameResolved, baseServer);
    pathname = decodePathname(pathname);
    (0, assert_js_1.assert)(pathname.startsWith('/'));
    return {
        origin,
        pathname,
        pathnameOriginal: pathnameOriginal,
        hasBaseServer,
        search,
        searchAll,
        searchOriginal,
        hash,
        hashOriginal
    };
}
exports.parseUrl = parseUrl;
function decodeSafe(urlComponent) {
    try {
        return decodeURIComponent(urlComponent);
    }
    catch { }
    try {
        return decodeURI(urlComponent);
    }
    catch { }
    return urlComponent;
}
function decodePathname(urlPathname) {
    return urlPathname
        .split('/')
        .map((dir) => decodeSafe(dir).split('/').join('%2F'))
        .join('/');
}
function parseWithNewUrl(urlWithoutHashNorSearch, baseServer) {
    // `new URL('//', 'https://example.org')` throws `ERR_INVALID_URL`
    if (urlWithoutHashNorSearch.startsWith('//')) {
        return { origin: null, pathnameResolved: urlWithoutHashNorSearch };
    }
    let isTauriProtocol = false;
    const PROTOCOL_TAURI = 'tauri://';
    const PROTOCOL_FAKE = 'http://';
    if (urlWithoutHashNorSearch.startsWith(PROTOCOL_TAURI)) {
        isTauriProtocol = true;
        urlWithoutHashNorSearch = PROTOCOL_FAKE + urlWithoutHashNorSearch.slice(PROTOCOL_TAURI.length);
    }
    let origin;
    let pathnameResolved;
    try {
        // `new URL(url)` throws an error if `url` doesn't have an origin
        const urlParsed = new URL(urlWithoutHashNorSearch);
        origin = urlParsed.origin;
        pathnameResolved = urlParsed.pathname;
    }
    catch (err) {
        // `url` has no origin
        origin = null;
        // In the browser, this is the Base URL of the current URL
        let base = typeof window !== 'undefined' &&
            // We need to access safely in case the user sets `window` in Node.js
            window?.document?.baseURI;
        base = base || 'http://fake.example.org' + baseServer;
        // `new Url()` supports:
        //  - `url === '/absolute/path'`
        //  - `url === './relative/path'`
        //  - `url === '?queryWithoutPath'`
        //  - `url === '''`
        // `base` in `new URL(url, base)` is used for resolving relative paths (`new URL()` doesn't remove `base` from `pathname`)
        const urlParsed = new URL(urlWithoutHashNorSearch, base);
        pathnameResolved = urlParsed.pathname;
    }
    if (!pathnameResolved)
        pathnameResolved = '/';
    if (isTauriProtocol) {
        (0, assert_js_1.assert)(origin);
        (0, assert_js_1.assert)(origin.startsWith(PROTOCOL_FAKE));
        origin = PROTOCOL_TAURI + origin.slice(PROTOCOL_FAKE.length);
    }
    (0, assert_js_1.assert)(pathnameResolved.startsWith('/'));
    // The URL pathname should be the URL without origin, query string, and hash.
    //  - https://developer.mozilla.org/en-US/docs/Web/API/URL/pathname
    (0, assert_js_1.assert)(pathnameResolved === pathnameResolved.split('?')[0].split('#')[0]);
    return { origin, pathnameResolved };
}
/* Not needed anymore?
function assertUsageBaseServer(baseServer: string, usageErrorMessagePrefix: string = '') {
  assertUsage(
    !baseServer.startsWith('http'),
    usageErrorMessagePrefix +
      '`base` is not allowed to start with `http`. Consider using `baseAssets` instead, see https://vite-plugin-ssr.com/base-url'
  )
  assertUsage(
    baseServer.startsWith('/'),
    usageErrorMessagePrefix + 'Wrong `base` value `' + baseServer + '`; `base` should start with `/`.'
  )
  assert(isBaseServer(baseServer))
}
*/
function assertPathname(urlPathname) {
    (0, assert_js_1.assert)(urlPathname.startsWith('/'));
    (0, assert_js_1.assert)(!urlPathname.includes('?'));
    (0, assert_js_1.assert)(!urlPathname.includes('#'));
}
function analyzeBaseServer(urlPathnameWithBase, baseServer) {
    assertPathname(urlPathnameWithBase);
    (0, assert_js_1.assert)(isBaseServer(baseServer));
    // Mutable
    let urlPathname = urlPathnameWithBase;
    (0, assert_js_1.assert)(urlPathname.startsWith('/'));
    (0, assert_js_1.assert)(baseServer.startsWith('/'));
    if (baseServer === '/') {
        const pathname = urlPathnameWithBase;
        return { pathname, hasBaseServer: true };
    }
    // Support `url === '/some-base-url' && baseServer === '/some-base-url/'`
    let baseServerNormalized = baseServer;
    if (baseServer.endsWith('/') && urlPathname === (0, slice_js_1.slice)(baseServer, 0, -1)) {
        baseServerNormalized = (0, slice_js_1.slice)(baseServer, 0, -1);
        (0, assert_js_1.assert)(urlPathname === baseServerNormalized);
    }
    if (!urlPathname.startsWith(baseServerNormalized)) {
        const pathname = urlPathnameWithBase;
        return { pathname, hasBaseServer: false };
    }
    (0, assert_js_1.assert)(urlPathname.startsWith('/') || urlPathname.startsWith('http'));
    (0, assert_js_1.assert)(urlPathname.startsWith(baseServerNormalized));
    urlPathname = urlPathname.slice(baseServerNormalized.length);
    if (!urlPathname.startsWith('/'))
        urlPathname = '/' + urlPathname;
    (0, assert_js_1.assert)(urlPathname.startsWith('/'));
    return { pathname: urlPathname, hasBaseServer: true };
}
function isBaseServer(baseServer) {
    return baseServer.startsWith('/');
}
exports.isBaseServer = isBaseServer;
function assertUrlComponents(url, origin, pathname, searchOriginal, hashOriginal) {
    const urlRecreated = createUrlFromComponents(origin, pathname, searchOriginal, hashOriginal);
    (0, assert_js_1.assert)(url === urlRecreated);
}
exports.assertUrlComponents = assertUrlComponents;
function createUrlFromComponents(origin, pathname, searchOriginal, hashOriginal) {
    const urlRecreated = `${origin || ''}${pathname}${searchOriginal || ''}${hashOriginal || ''}`;
    return urlRecreated;
}
exports.createUrlFromComponents = createUrlFromComponents;
